!<arch>
0-isupper.c/    0           0     0     644     239       `
#include "main.h"

/**
 * _isupper - Check if a letter is upper
 * @x: The number to be checked
 *
 * Return:1 for upper letter or 0 for any thing else
 */
int _isupper(int x)
{
	if (x >= 65 && x <= 90)
	{
		return (1);
	}
	return (0);

}

0-memset.c/     0           0     0     644     302       `
#include "main.h"
/**
 * _memset - Fill memory with a constant byte
 * @s: memory area to fill
 * @b: constant byte to fill
 * @n: bytes of memory area to fill
 * Return: the memory area filled
 */
char *_memset(char *s, char b, unsigned int n)
{
	while (n)
	{
		s[n - 1] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     308       `
#include "main.h"
#include <stdio.h>
/**
 * _strcat - concatenates two strings
 * @dest: The destination string
 * @src: The source string
 * Return: A pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	char *pointer;

	strcat(dest, src);
	pointer = dest;

	return (pointer);
}
1-memcpy.c/     0           0     0     644     403       `
#include "main.h"
/**
 * _memcpy - The _memcpy() function copies n bytes
 * from memory area src to memory area dest
 * @dest:area where bytes are copied to
 * @src: area where bytes are copied from
 * @n: number of bytes to copy
 * Return: returns a pointer to n
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     479       `
#include "main.h"

/**
 * _strncat - Concatenates two strings
 * @dest: The destination value
 * @src: The source value
 * @n: The limit of concatenation
 * Return: A pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int k;
	int j;

	k = 0;

	for (j = 0; j < 1000; j++)
	{
		if (dest[j] == '\0')
		{
			break;
		}

		k++;
	}

	for (j = 0; src[j] != '\0' && j < n; j++)
	{
		dest[k + j] = src[j];
	}

	dest[k + j] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     437       `
#include "main.h"
/**
 * _atoi - conert a string to an integer
 * @s: The pointer to convert
 *
 * Return: An integer
 */

int _atoi(char *s)
{
	int c = 0;
	unsigned int fi = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			fi = (fi * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	fi *= min;
	return (fi);
}

2-strchr.c/     0           0     0     644     409       `
#include "main.h"
/**
 * _strchr - Returns pointer to occurence 1
 * of the character c in the string s, or NULL if the
 * character is not found
 *
 * @s: string targeted
 * @c: character targeted
 *
 * Return: return pointer to first occurence of c
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; (s[i] != c) && (s[i] != '\0'); i++)
		;
	if (s[i] == c)
		return (s + i);
	else
		return (NULL);
}

2-strlen.c/     0           0     0     644     231       `
#include "main.h"
/**
 * _strlen - returns the string length
 * @s:string
 * Return: returns the length;
 */
int _strlen(char *s)
{
	int count, inc;

	inc = 0;
	for (count = 0; s[count] != '\0'; count++)

	inc++;

	return (inc);
}

3-islower.c/    0           0     0     644     239       `
#include "main.h"
/**
 *_islower - Checks if the character is lower case
 *@c:The character to be checked
 *Return:0 and 1 depending on the conditions
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	return (0);
}

3-puts.c/       0           0     0     644     260       `
#include "main.h"
/**
 * _puts - prints a string
 * @str: the string to be printed
 *
 * Description: prints a string
 * Returns: number of characters printed
 */
void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _strcmp - compare
 * @s1: pointer to char params
 * @s2: pointer to char params
 * Return: *dest
 */

int _strcmp(char *s1, char *s2)
{
	while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	if (*s1 == *s2)
	{
		return (0);
	}
	else
	{
		return (*s1 - *s2);
	}
}
3-strspn.c/     0           0     0     644     579       `
#include "main.h"
/**
 * _strspn - search the number of bytes in the initial
 * segment of s that consist only of bytes from accept
 * @s: segment targeted
 * @accept: reference bytes container
 *
 * Return: returns the numbe of bytes in the initial
 * segment of s consisting of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (accept[i] == *s)
			{
				bytes++;
				break;
			}
			else if ((accept[i + 1]) == '\0')
				return (bytes);
		}
		s++;
	}
	return (bytes);
}

4-isalpha.c/    0           0     0     644     263       `
#include"main.h"
/**
 *_isalpha - checks for alphabetic letters
 *@c: a character to be checked
 *Return: returns 0 or 1 depending on conditioin
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}

	return (0);
}

4-strpbrk.c/    0           0     0     644     535       `
#include "main.h"
/**
 * _strpbrk - The _strpbrk() function locates the first
 * occurence in the strings of any of the bytes in
 * the string accept
 * @s: string where search is made
 * @accept: string where searched bytes are located
 * Return: Returns a pointer to the byte in s that matches
 * one of the bytes in accept,or NULL if no such byte is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (accept[i] == *s)
				return (s);
		}
		s++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     265       `
#include "main.h"
/**
 * _abs - Computes the absolute value of an integer
 * @c: The number to be computed.
 *
 * Return: Absolute value of number zero
 */

int _abs(int c)
{
	if (c < 0)
	{
		int abs_val;

		abs_val = c * -1;

		return (abs_val);
	}
	return (c);
}

9-strcpy.c/     0           0     0     644     285       `
#include "main.h"
/**
 * _strcpy - copy a string
 * @dest: value destination
 * @src: source value
 *
 * Return: the pointer to thedest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}

